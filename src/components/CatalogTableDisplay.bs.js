// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core from "@material-ui/core";
import * as Styles from "@material-ui/styles";
import * as Colors from "@material-ui/core/colors";

var fontWeightBold = "700";

var fontWeightRegular = "400";

var fontSize = "1rem";

var letterSpacing = "0.15px";

var Subtitle1 = {
  fontSize: fontSize,
  fontWeight: fontWeightRegular,
  letterSpacing: letterSpacing
};

var fontSize$1 = "1rem";

var letterSpacing$1 = "0.5px";

var Body1 = {
  fontSize: fontSize$1,
  fontWeight: fontWeightRegular,
  letterSpacing: letterSpacing$1
};

var Body2 = {
  fontSize: "0.875rem",
  fontWeight: fontWeightRegular,
  letterSpacing: "0.25px"
};

var TableDisplayProps = {};

var useStyles = Styles.makeStyles({
      root: {
        fontSize: fontSize$1,
        fontWeight: fontWeightRegular,
        letterSpacing: letterSpacing$1
      }
    });

function truncateSummary(input) {
  return input.slice(0, 85).concat("...");
}

function CatalogTableDisplay$CatalogTableItem(Props) {
  var item = Props.item;
  var classes = useStyles();
  return React.createElement(React.Fragment, undefined, React.createElement(Core.TableCell, {
                  children: item.label,
                  className: classes.root
                }), React.createElement(Core.TableCell, {
                  children: truncateSummary(item.summary),
                  className: classes.root
                }), React.createElement(Core.TableCell, {
                  children: item.id,
                  className: classes.root
                }));
}

var CatalogTableItem = {
  useStyles: useStyles,
  truncateSummary: truncateSummary,
  make: CatalogTableDisplay$CatalogTableItem
};

function CatalogTableDisplay$CatalogTableRow(Props) {
  var nextCursor = Props.nextCursor;
  var lastIndex = Props.lastIndex;
  var targetRef = Props.targetRef;
  var strains = Props.strains;
  return Belt_Array.mapWithIndex(strains, (function (idx, item) {
                var k = String(idx) + item.id;
                if (idx === lastIndex && nextCursor !== 0) {
                  return React.createElement(React.Fragment, undefined, React.createElement(Core.TableRow, {
                                  children: React.createElement(CatalogTableDisplay$CatalogTableItem, {
                                        item: item
                                      }),
                                  key: k
                                }), React.createElement(Core.TableRow, {
                                  children: React.createElement(Core.TableCell, {
                                        children: React.createElement(Core.LinearProgress, {}),
                                        colSpan: 3
                                      }),
                                  key: String(idx),
                                  ref: targetRef
                                }));
                } else {
                  return React.createElement(Core.TableRow, {
                              children: React.createElement(CatalogTableDisplay$CatalogTableItem, {
                                    item: item
                                  }),
                              key: String(idx)
                            });
                }
              }));
}

var CatalogTableRow = {
  make: CatalogTableDisplay$CatalogTableRow
};

var columns = [
  "Strain Descriptor",
  "Strain Summary",
  "Strain ID"
];

var useStyles$1 = Styles.makeStyles({
      root: {
        borderBottom: "2px solid " + Colors.indigo[700],
        fontSize: fontSize,
        fontWeight: fontWeightBold,
        letterSpacing: letterSpacing
      }
    });

function CatalogTableDisplay$CatalogTableHeader(Props) {
  var classes = useStyles$1();
  return React.createElement(Core.TableRow, {
              children: Belt_Array.mapWithIndex(columns, (function (i, c) {
                      return React.createElement(Core.TableCell, {
                                  children: c,
                                  className: classes.root,
                                  key: String(i)
                                });
                    }))
            });
}

var CatalogTableHeader = {
  columns: columns,
  useStyles: useStyles$1,
  make: CatalogTableDisplay$CatalogTableHeader
};

var useStyles$2 = Styles.makeStyles({
      root: {
        overflowX: "initial"
      }
    });

function CatalogTableDisplay(Props) {
  var dataField = Props.dataField;
  var target = Props.target;
  var data = Props.data;
  var classes = useStyles$2();
  var match = Js_dict.get(data, dataField);
  var tmp;
  if (match !== undefined) {
    var strains = match.strains;
    tmp = React.createElement(Core.Table, {
          children: null,
          stickyHeader: true
        }, React.createElement(Core.TableHead, {
              children: React.createElement(CatalogTableDisplay$CatalogTableHeader, {})
            }), React.createElement(Core.TableBody, {
              children: React.createElement(CatalogTableDisplay$CatalogTableRow, {
                    nextCursor: match.nextCursor,
                    lastIndex: strains.length - 1 | 0,
                    targetRef: target,
                    strains: strains
                  })
            }));
  } else {
    tmp = "no data";
  }
  return React.createElement(Core.TableContainer, {
              children: tmp,
              className: classes.root
            });
}

var fontWeightMedium = "500";

var fontWeightLight = "300";

var make = CatalogTableDisplay;

export {
  fontWeightBold ,
  fontWeightMedium ,
  fontWeightRegular ,
  fontWeightLight ,
  Subtitle1 ,
  Body1 ,
  Body2 ,
  TableDisplayProps ,
  CatalogTableItem ,
  CatalogTableRow ,
  CatalogTableHeader ,
  useStyles$2 as useStyles,
  make ,
  
}
/* useStyles Not a pure module */
